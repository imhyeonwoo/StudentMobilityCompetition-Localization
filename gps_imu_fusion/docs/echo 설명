📍 1. /ublox_gps_node/fix_velocity
속도 정보 (linear & angular) + 공분산

yaml
Copy
Edit
header:           # 메시지 시간 및 frame 정보
  stamp:          # timestamp
  frame_id: gps   # 기준 좌표계 (여기선 gps 기준)

twist:            # 속도 정보
  twist:
    linear:       # 선속도 (m/s)
      x:
      y:
      z:
    angular:      # 각속도 (rad/s), 거의 사용 안함
      x:
      y:
      z:
  covariance:     # 속도 값의 신뢰도 (공분산 행렬 6x6 → 36개)
📍 2. /ublox_gps_node/fix
위치 정보 (경도, 위도, 고도) + 공분산

yaml
Copy
Edit
header:
  stamp:
  frame_id: gps     # GPS 센서의 frame

status:             # GPS 상태 정보
  status:           # 0: FIX (고정됨), 1: SBAS, 2: DGPS, etc
  service:          # 사용 중인 위성 시스템 (15는 GNSS 전체)

latitude:           # 위도 (도 단위)
longitude:          # 경도
altitude:           # 고도 (미터)

position_covariance:        # 위치 오차에 대한 공분산 행렬 3x3 → 9개
position_covariance_type:   # 공분산 해석 타입 (2면 Horizontal Only)
📍 3. /imu/data
IMU 센서의 자세 + 속도 + 가속도

yaml
Copy
Edit
header:
  stamp:
  frame_id: imu_link   # IMU 센서의 frame

orientation:           # 자세 (쿼터니언 형태)
  x, y, z, w
orientation_covariance:    # 자세 오차 공분산 (3x3)

angular_velocity:      # 각속도 (rad/s)
  x, y, z
angular_velocity_covariance:

linear_acceleration:   # 선형 가속도 (m/s²)
  x, y, z
linear_acceleration_covariance:
📍 4. /pose/filtered
EKF로 필터링된 위치 + 자세 정보

yaml
Copy
Edit
header:
  stamp:
  frame_id: map         # 맵 좌표계 기준
child_frame_id: base_link

pose:
  pose:
    position:           # EKF로 추정한 위치
      x, y, z
    orientation:        # EKF로 추정한 자세 (쿼터니언)
      x, y, z, w
  covariance:           # 위치+자세의 공분산 (6x6 → 36개)

twist:
  twist:                # EKF로 추정한 속도
    linear:             # 선속도
      x, y, z
    angular:            # 각속도
      x, y, z
  covariance:           # 속도 관련 공분산
📍 5. /odometry/filtered
/pose/filtered와 거의 같고, Odometry 메시지 타입 사용

yaml
Copy
Edit
header:
  stamp:
  frame_id: map
child_frame_id: base_link

pose:
  pose: position + orientation
  covariance:

twist:
  twist: linear + angular
  covariance:
📝 즉, /pose/filtered는 geometry_msgs/PoseWithCovarianceStamped 타입이고,
/odometry/filtered는 nav_msgs/Odometry 타입이야. 구조는 거의 비슷해.
